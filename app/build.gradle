plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.supercom.puretrack"
        minSdk 29
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.name.replace("Debug", "-debug").replace("Release", "-release").toLowerCase()
            outputFileName = "PureTrack-$buildType-build-v${variant.versionName}(${variant.versionCode}).apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

/* Core */
    implementation files('libs/cdm.jar')
    implementation files('libs/edm.jar')
    implementation files('libs/license.jar')
    //implementation files('libs/pass-v1.2.0.jar')
    //implementation files('libs/sdk-v1.0.0.jar')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}" // used in this project to loop over a sealed class for e.g
    // Android KTX
    implementation "androidx.core:core-ktx:${versions.ktx_core}"
    implementation "androidx.activity:activity-ktx:${versions.ktx_activity}"
    implementation "androidx.fragment:fragment-ktx:${versions.ktx_fragment}"
    implementation "androidx.collection:collection-ktx:${versions.ktx_collection}"

    // Android Support
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    // Google Play Services
    implementation "com.google.android.gms:play-services-location:${versions.location}"
    implementation "com.google.android.gms:play-services-maps:${versions.maps}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:${versions.coroutines_play}" // convert from a Task to coroutines
/* Life Cycle */

    implementation "android.arch.lifecycle:common-java8:${versions.java8}"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle_ext}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"

/* ----------- Network ---------- */
    // Gson
    implementation "com.google.code.gson:gson:${versions.gson}"
    // Okhttp
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

/* --------- UI --------- */

    implementation "androidx.cardview:cardview:${versions.cardview}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"

    // Material gadgets
    implementation "com.google.android.material:material:${versions.material}"

    // ConstraintLayout
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"

    // Navigation components
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"

    // Maps services
    implementation "com.google.maps:google-maps-services:${versions.maps_services}"
    implementation "com.google.maps.android:maps-ktx:${versions.maps_ktx}"

    // Compose - under POC!!!
    implementation 'androidx.compose.ui:ui:1.2.1'
    implementation 'androidx.compose.ui:ui-tooling:1.2.1' // Tooling support (Previews, etc.)
    implementation 'androidx.compose.foundation:foundation:1.2.1' // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation 'androidx.compose.material:material:1.2.1' // Material Design
    implementation 'androidx.compose.material:material-icons-core:1.2.1' // Material design icons
    implementation 'androidx.compose.material:material-icons-extended:1.2.1'
    implementation 'androidx.activity:activity-compose:1.5.1' // Integration with activities

    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1' // Integration with ViewModels
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.1' // Integration with observables

/* ----------- Camera ---------- */
    implementation "androidx.camera:camera-camera2:${versions.camerax}"
    implementation "androidx.camera:camera-lifecycle:${versions.camerax}"

/* ----------- Storage ---------- */
    // Room
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"// Kotlin Extensions and Coroutines support for Room
    kapt "androidx.room:room-compiler:${versions.room}"


    // Preferences DataStore
    //implementation 'androidx.datastore:datastore-core:1.0.0-rc01'
    implementation "androidx.datastore:datastore-preferences:${versions.datastore_pref}"

/* --------- DI --------- */
    // Hilt
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt "com.google.dagger:hilt-compiler:${versions.hilt}"
    // Integration with the Jetpack navigation library
    implementation "androidx.hilt:hilt-navigation-fragment:${versions.hilt_nav}"
    // Integration with the WorkManager - TODO: once we add work managers add these dependencies and fix crash for android 31 and above
    //implementation 'androidx.hilt:hilt-work:1.0.0'
    //kapt 'androidx.hilt:hilt-compiler:1.0.0'
/* --------- Utils --------- */
    // Timber
    implementation "com.jakewharton.timber:timber:${versions.timber}"

/* --------- TOOLS ------ */
    //implementation("com.github.haifengl:smile-kotlin:2.6.0") // library for machine learning, NLP, linear algebra, graph, interpolation, and visualization system, used here for the dbscan algo

/* --------- FIREBASE ------ */
    implementation platform("com.google.firebase:firebase-bom:${versions.firebase}")
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

/* ----------- Testing ---------- */
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.junit_ext}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"

    /* ----------- Glide ---------- */
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'

}